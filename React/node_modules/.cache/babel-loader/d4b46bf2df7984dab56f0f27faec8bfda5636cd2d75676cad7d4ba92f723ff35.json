{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\donut\\\\spotify_clone\\\\src\\\\components\\\\SongList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SongList() {\n  _s();\n  const [audioList, setAudioList] = useState([]);\n  async function fetchAudioList() {\n    try {\n      const response = await fetch(\"/audio\");\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n      setAudioList(data);\n    } catch (error) {\n      console.error(\"Failed to fetch audio list:\", error);\n    }\n  }\n  useEffect(() => {\n    fetchAudioList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Song List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: audioList.length === 0 ? /*#__PURE__*/_jsxDEV(Col, {\n        children: \"No audio files available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this) : audioList.map(audio => /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: audio.song_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this)\n      }, audio.file_path, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(SongList, \"Zj/c2mZPtXHKYxvHkCrMPe8TcMg=\");\n_c = SongList;\nexport default SongList;\nvar _c;\n$RefreshReg$(_c, \"SongList\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","jsxDEV","_jsxDEV","SongList","_s","audioList","setAudioList","fetchAudioList","response","fetch","ok","Error","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","audio","song_name","file_path","_c","$RefreshReg$"],"sources":["C:/Users/donut/spotify_clone/src/components/SongList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction SongList() {\r\n  const [audioList, setAudioList] = useState([]);\r\n\r\n  async function fetchAudioList() {\r\n    try {\r\n      const response = await fetch(\"/audio\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const data = await response.json();\r\n      setAudioList(data);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch audio list:\", error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchAudioList();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Song List</h1>\r\n      <Row>\r\n        {audioList.length === 0 ? (\r\n          <Col>No audio files available.</Col>\r\n        ) : (\r\n          audioList.map((audio) => (\r\n            <Col key={audio.file_path}>\r\n              <div>\r\n                <strong>{audio.song_name}</strong>\r\n              </div>\r\n            </Col>\r\n          ))\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SongList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,GAAG,EAAEC,GAAG,QAAQ,iBAAiB;AACrD,OAAO,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE9C,eAAeW,cAAcA,CAAA,EAAG;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,QAAQ,CAAC;MACtC,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCP,YAAY,CAACM,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF;EAEAjB,SAAS,CAAC,MAAM;IACdU,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA,CAACJ,SAAS;IAAAkB,QAAA,gBACRd,OAAA;MAAAc,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBlB,OAAA,CAACH,GAAG;MAAAiB,QAAA,EACDX,SAAS,CAACgB,MAAM,KAAK,CAAC,gBACrBnB,OAAA,CAACF,GAAG;QAAAgB,QAAA,EAAC;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GAEpCf,SAAS,CAACiB,GAAG,CAAEC,KAAK,iBAClBrB,OAAA,CAACF,GAAG;QAAAgB,QAAA,eACFd,OAAA;UAAAc,QAAA,eACEd,OAAA;YAAAc,QAAA,EAASO,KAAK,CAACC;UAAS;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B;MAAC,GAHEG,KAAK,CAACE,SAAS;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIpB,CACN;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB;AAAChB,EAAA,CAtCQD,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AAwCjB,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}